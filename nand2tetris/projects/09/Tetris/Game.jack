class Game{
    field List list;
    field int direction;
    field Square square;

    /** Constructs a new Game. */
    constructor Game new(List v) {
        let list = v;
        let square = v.getData();
        let direction = 0;
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
       do square.dispose();
       do Memory.deAlloc(this);
       return;
    }

    /** Moves the square in the current direction. */
    method void moveSquare() {
       if (direction = 1) { do square.moveUp(); }
       if (direction = 2) { do square.moveDown(); }
       if (direction = 3) { do square.moveLeft(); }
       if (direction = 4) { do square.moveRight(); }
       let direction = 0;
       do Sys.wait(200);  // delays the next movement
       return;
    }

    method void run() {
        var boolean exit;
        var boolean fullLine;
        var boolean halt;
        var int y;

        let exit = false;

        while (~exit) {
            let halt = halt();
            if (halt) {
                do Output.printString("halt");
                let y = square.getY();
                do square.dispose();
                let list = list.getNext();

                if (~(list.getData() = null)) {
                    let square = list.getData();
                    let fullLine = Util.fullLine(y);
                    if(fullLine) {
                        do Util.redraw(y);
                    }
                }
            }

            do moveWithKey();
        }

        return;
    }

    method void eraseLine() {
        return;
    }

    method void moveWithKey() {
        var char key;
        let key = Keyboard.keyPressed();
        if (key = 131) { let direction = 1; }   // up arrow
        if (key = 133) { let direction = 2; }   // down arrow
        if (key = 130) { let direction = 3; }   // left arrow
        if (key = 132) { let direction = 4; }   // right arrow
        do moveSquare();
        return;
    }

    method boolean halt() {
        var boolean highest, collide1, collide2;

        if (square.getY() = 14) {
            return true;
        }


        let collide1 = Util.collide(square.getX(), square.getY());
//        let collide2 = Util.collide(square.getX() + 1, square.getY());


        return collide1;

    }
}
